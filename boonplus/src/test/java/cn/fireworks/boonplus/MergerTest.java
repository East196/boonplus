package cn.fireworks.boonplus;

import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.*;

import org.junit.Test;

public class MergerTest {

	@Test
	public void type() throws Exception {
		assertThat(Merger.class, notNullValue());
	}

	@Test
	public void instantiation() throws Exception {
		Merger target = new Merger();
		assertThat(target, notNullValue());
	}

	@Test
	public void mergeNotNullToFirst_A$Class$ObjectArray() throws Exception {
		Class<Request> destKlass = Request.class;
		Request actual = Merger.mergeNotNullToFirst(destKlass, new Request("1", "2", "3", null, null),
				new Request("0", "1", null, null, "4"));
		Request expected = new Request("0", "1", "3", null, "4");

	}

	@Test
	public void mergeNotNullToFirst_A$Object$ObjectArray() throws Exception {
		Request template = new Request(null, null, null, "5", "3");
		Object[] srcs = new Object[] { new Request("1", "2", "3", "4", "5"), new Request("0", "1", null, null, "4") };
		Request actual = Merger.mergeNotNullToFirst(template, srcs);
		Request expected = new Request("0", "1", "3", "5", "4");
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void mergeToFirst_A$Object$ObjectArray() throws Exception {
		// TODO auto-generated by JUnit Helper.
		Object template = null;
		Object[] srcs = new Object[] {};
		Object actual = Merger.mergeToFirst(template, srcs);
		Object expected = null;
		assertThat(actual, is(equalTo(expected)));
	}

	static class Request {

		final String method; // could be GET, POST, or loadUser
		final Object headers; // could be map or list or object
		final Object params; // could be map or list or object
		final Object payload; // Could be JSON payload, XML or Java objects or buffer
		final String path; // could be URL, URI, or some sort of address

		final long correlationId; // used to match requests with responses.

		public Request(String method, Object headers, Object params, Object payload, String path) {
			this.method = method;
			this.params = params;
			this.headers = headers;
			this.payload = payload;
			this.path = path;
			this.correlationId = -1; // -1 means none
		}

	}

}
